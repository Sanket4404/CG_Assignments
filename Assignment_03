Write C++ program to draw a concave polygon and fill it with desired color using scan fill algorithm. Apply the concept of inheritance.

#include<iostream.h>
#include<conio.h>
#include<dos.h>
#include<graphics.h>
#include<math.h>
class mypolygon
{
public:
	int n,x[10],y[10],i;

public:
	void read();
	void display();
	void scanline();
};
void mypolygon::read()
{
	cout<<"\nEnter value of n:";
	cin>>n;
	cout<<"Enter the value of x and y :"<<endl;
	for(int i=0;i<n;i++)
	{
		cin>>x[i]>>y[i];
	}
}

void mypolygon::display()
{
	for(i=0;i<n-1;i++)
	{
		line(x[i],y[i],x[i+1],y[i+1]);

	}
	line(x[0],y[0],x[n-1],y[n-1]);
}
void mypolygon::scanline()
{
	int ymin=y[0];
	int ymax=y[0];
	for(int i=1;i<n;i++)
	{
		if(ymin>y[i])
			ymin=y[i];
		if(ymax<y[i])
			ymax=y[i];
	}
  //	cout<<"ymin:"<<ymin<<endl;
  //	cout<<"ymax:"<<ymax<<endl;
	float slope[10],dy,dx;
	y[n]=y[0];
	x[n]=x[0];
	for(int k=0;k<n;k++)
	{
		dy = (y[k+1]-y[k]);
		dx = (x[k+1]-x[k]);
		if(dy==0)
			slope[k]=1;
		else if(dx==0)
			slope[k]=0;
		else
			slope[k]=dy/dx;

	   //	cout<<"\n slope is:"<<slope[k]<<endl;
	}
	int p,x_int[10],temp,j;

	for(p=ymin;p<ymax;p++)
	{
		k=0;
		for(i=0;i<n;i++)
		{
			if(((y[i]<=p)&&(y[i+1]>p))||((y[i+1]<=p)&&(y[i]>p)))
			{
				x_int[k] = x[i]+(slope[i]*(p-y[i]));
				k++;
			}
		}
	   /*	//print intersection points
		cout<<endl<<" Scan line " <<p <<" intersections = ";
		for(j=0;j<k;j++)
			cout<<" " <<x_int[j];
	   */	//sort intersection points
		for(j=0;j<k-1;j++)
		{
			for(i=0;i<k-1;i++)
			{
				if(x_int[i]>x_int[i+1])
				{
					temp=x_int[i];
					x_int[i]= x_int[i+1];
					x_int[i+1] = temp;
				}
			}
		}
	    /*	//print sorted intersection points
		cout<<endl<<" Sorted Scan line " <<p<<" intersections = ";
		for(j=0;j<k;j++)
			cout<<" " <<x_int[j];
	    */
		//draw scanline
		for(i=0;i<k;i=i+2)
		{
			line(x_int[i],p,x_int[i+1],p);
			delay(20);
		}
	}
}

int main()
{
	int gd=DETECT,gm;
	initgraph(&gd,&gm,"c:\\TURBOC3\\BGI");
	mypolygon obj;
	obj.read();
	obj.display();
	cleardevice();
	obj.scanline();
	getch();
	closegraph();
	return 0;
}
